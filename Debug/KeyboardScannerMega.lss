
KeyboardScannerMega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000060e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e4  00800200  00800200  0000060e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f65  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000059e  00000000  00000000  00001705  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a78  00000000  00000000  00001ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  0000271c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000475  00000000  00000000  00002a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b73  00000000  00000000  00002edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00003a50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	f4 c1       	rjmp	.+1000   	; 0x452 <__vector_26>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	f6 c1       	rjmp	.+1004   	; 0x4be <__vector_52>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 3e       	cpi	r26, 0xE4	; 228
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	12 d2       	rcall	.+1060   	; 0x52a <main>
 106:	47 c2       	rjmp	.+1166   	; 0x596 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <setupQueue>:
 #include "circularQueue.h"
 #include "globalInclude.h"
 #include <util/delay.h>
 
 void setupQueue(struct cirQueue *q){
	q->qFront = &q->theQueue[0];
 10a:	fc 01       	movw	r30, r24
 10c:	ec 59       	subi	r30, 0x9C	; 156
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	91 83       	std	Z+1, r25	; 0x01
 112:	80 83       	st	Z, r24
	q->qRear = &q->theQueue[0];
 114:	32 96       	adiw	r30, 0x02	; 2
 116:	91 83       	std	Z+1, r25	; 0x01
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <enqueue>:
 }

 void enqueue(struct cirQueue *q, char c)
 {
	*q->qFront = c;
 11c:	fc 01       	movw	r30, r24
 11e:	ec 59       	subi	r30, 0x9C	; 156
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	a0 81       	ld	r26, Z
 124:	b1 81       	ldd	r27, Z+1	; 0x01
 126:	6c 93       	st	X, r22

	if(q->qFront >= &q->theQueue[100])
 128:	20 81       	ld	r18, Z
 12a:	31 81       	ldd	r19, Z+1	; 0x01
 12c:	2e 17       	cp	r18, r30
 12e:	3f 07       	cpc	r19, r31
 130:	18 f0       	brcs	.+6      	; 0x138 <enqueue+0x1c>
		q->qFront = &q->theQueue[0];
 132:	91 83       	std	Z+1, r25	; 0x01
 134:	80 83       	st	Z, r24
 136:	08 95       	ret
	else
		q->qFront++;
 138:	fc 01       	movw	r30, r24
 13a:	ec 59       	subi	r30, 0x9C	; 156
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	31 83       	std	Z+1, r19	; 0x01
 144:	20 83       	st	Z, r18
 146:	08 95       	ret

00000148 <dequeue>:
 }

 char dequeue(struct cirQueue *q)
 {
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29

	return temp;
 }

 char isEmpty(struct cirQueue *q){
	if(q->qFront == q->qRear){
 14c:	fc 01       	movw	r30, r24
 14e:	ea 59       	subi	r30, 0x9A	; 154
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	01 90       	ld	r0, Z+
 154:	f0 81       	ld	r31, Z
 156:	e0 2d       	mov	r30, r0
 158:	dc 01       	movw	r26, r24
 15a:	ac 59       	subi	r26, 0x9C	; 156
 15c:	bf 4f       	sbci	r27, 0xFF	; 255

 char dequeue(struct cirQueue *q)
 {
	char temp;
	//check if you can deqeue
	while(isEmpty(q)==0){
 15e:	2d 91       	ld	r18, X+
 160:	3c 91       	ld	r19, X
 162:	11 97       	sbiw	r26, 0x01	; 1
 164:	2e 17       	cp	r18, r30
 166:	3f 07       	cpc	r19, r31
 168:	79 f4       	brne	.+30     	; 0x188 <dequeue+0x40>

	return temp;
 }

 char isEmpty(struct cirQueue *q){
	if(q->qFront == q->qRear){
 16a:	ec 01       	movw	r28, r24
 16c:	ca 59       	subi	r28, 0x9A	; 154
 16e:	df 4f       	sbci	r29, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	25 e0       	ldi	r18, 0x05	; 5
 172:	2a 95       	dec	r18
 174:	f1 f7       	brne	.-4      	; 0x172 <dequeue+0x2a>
 176:	00 00       	nop
 178:	e8 81       	ld	r30, Y
 17a:	f9 81       	ldd	r31, Y+1	; 0x01

 char dequeue(struct cirQueue *q)
 {
	char temp;
	//check if you can deqeue
	while(isEmpty(q)==0){
 17c:	2d 91       	ld	r18, X+
 17e:	3c 91       	ld	r19, X
 180:	11 97       	sbiw	r26, 0x01	; 1
 182:	2e 17       	cp	r18, r30
 184:	3f 07       	cpc	r19, r31
 186:	a1 f3       	breq	.-24     	; 0x170 <dequeue+0x28>
		_delay_us(1); //#fixme, will not seem to work with out the delay, can I do somthing shorter like nop?
	}

	temp = *q->qRear;
 188:	20 81       	ld	r18, Z
	if(q->qRear >= &q->theQueue[100])
 18a:	ac 01       	movw	r20, r24
 18c:	4c 59       	subi	r20, 0x9C	; 156
 18e:	5f 4f       	sbci	r21, 0xFF	; 255
 190:	e4 17       	cp	r30, r20
 192:	f5 07       	cpc	r31, r21
 194:	30 f0       	brcs	.+12     	; 0x1a2 <dequeue+0x5a>
		q->qRear = & q->theQueue[0];
 196:	fc 01       	movw	r30, r24
 198:	ea 59       	subi	r30, 0x9A	; 154
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	91 83       	std	Z+1, r25	; 0x01
 19e:	80 83       	st	Z, r24
 1a0:	06 c0       	rjmp	.+12     	; 0x1ae <dequeue+0x66>
	else
		q->qRear++;
 1a2:	dc 01       	movw	r26, r24
 1a4:	aa 59       	subi	r26, 0x9A	; 154
 1a6:	bf 4f       	sbci	r27, 0xFF	; 255
 1a8:	31 96       	adiw	r30, 0x01	; 1
 1aa:	ed 93       	st	X+, r30
 1ac:	fc 93       	st	X, r31

	return temp;
 }
 1ae:	82 2f       	mov	r24, r18
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <isEmpty>:

 char isEmpty(struct cirQueue *q){
	if(q->qFront == q->qRear){
 1b6:	dc 01       	movw	r26, r24
 1b8:	ac 59       	subi	r26, 0x9C	; 156
 1ba:	bf 4f       	sbci	r27, 0xFF	; 255
 1bc:	fc 01       	movw	r30, r24
 1be:	ea 59       	subi	r30, 0x9A	; 154
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	4d 91       	ld	r20, X+
 1c6:	5c 91       	ld	r21, X
 1c8:	20 81       	ld	r18, Z
 1ca:	31 81       	ldd	r19, Z+1	; 0x01
 1cc:	42 17       	cp	r20, r18
 1ce:	53 07       	cpc	r21, r19
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <isEmpty+0x1e>
 1d2:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
	else{
		return 1;
	}
 1d4:	08 95       	ret

000001d6 <midiCommandToQueue>:
	 }
 }



 void midiCommandToQueue(char channel, char cmd, char pitch){
 1d6:	cf 93       	push	r28
 1d8:	c4 2f       	mov	r28, r20
	 
	 char chanelCommand = (cmd & 0xF0) | (channel & 0x0F);
 1da:	96 2f       	mov	r25, r22
 1dc:	90 7f       	andi	r25, 0xF0	; 240
 1de:	8f 70       	andi	r24, 0x0F	; 15
 1e0:	69 2f       	mov	r22, r25
 1e2:	68 2b       	or	r22, r24
	 
	 //push channel and command
	 //midiMessageBuffer.put(chanelCommand);
	 enqueue(&serialOutQueue, chanelCommand);
 1e4:	84 e1       	ldi	r24, 0x14	; 20
 1e6:	92 e0       	ldi	r25, 0x02	; 2
 1e8:	99 df       	rcall	.-206    	; 0x11c <enqueue>
	 //push pitch
	 //midiMessageBuffer.put(pitch);
	 enqueue(&serialOutQueue, pitch);
 1ea:	6c 2f       	mov	r22, r28
 1ec:	84 e1       	ldi	r24, 0x14	; 20
 1ee:	92 e0       	ldi	r25, 0x02	; 2
 1f0:	95 df       	rcall	.-214    	; 0x11c <enqueue>
	 //push velocity
	 //midiMessageBuffer.put(_DEFAULTVELOCITY);
	 enqueue(&serialOutQueue, _DEFAULTVELOCITY);
 1f2:	69 e6       	ldi	r22, 0x69	; 105
 1f4:	84 e1       	ldi	r24, 0x14	; 20
 1f6:	92 e0       	ldi	r25, 0x02	; 2
 1f8:	91 df       	rcall	.-222    	; 0x11c <enqueue>
	 TX0_INTERRUPT_ON;
 1fa:	e1 ec       	ldi	r30, 0xC1	; 193
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	80 62       	ori	r24, 0x20	; 32
 202:	80 83       	st	Z, r24
 }
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <parseLeft>:
	 
	 return debounced;
	 //return currentbits;
 }

 void parseLeft(char changedBits, char thePort, char offset, char channel){
 208:	ef 92       	push	r14
 20a:	ff 92       	push	r15
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	08 2f       	mov	r16, r24
 216:	e6 2e       	mov	r14, r22
 218:	f2 2e       	mov	r15, r18
 21a:	18 e0       	ldi	r17, 0x08	; 8
 21c:	14 0f       	add	r17, r20
 21e:	c4 2f       	mov	r28, r20
	 unsigned char count = 0;
	 for (unsigned char mask = 0x01; mask; mask <<= 1) {
 220:	d1 e0       	ldi	r29, 0x01	; 1
		 if(mask&changedBits?'1':'0' == 1){ //key is depressed, so do something
 222:	9d 2f       	mov	r25, r29
 224:	90 23       	and	r25, r16
 226:	61 f0       	breq	.+24     	; 0x240 <parseLeft+0x38>
			 //figure out what state to send out the MIDI port
			 if(thePort&mask?'1':'0' == 1){ //if depressed
 228:	9d 2f       	mov	r25, r29
 22a:	9e 21       	and	r25, r14
 22c:	29 f0       	breq	.+10     	; 0x238 <parseLeft+0x30>
				 midiCommandToQueue(channel, _NOTEON, (count+offset));
 22e:	4c 2f       	mov	r20, r28
 230:	60 e9       	ldi	r22, 0x90	; 144
 232:	8f 2d       	mov	r24, r15
 234:	d0 df       	rcall	.-96     	; 0x1d6 <midiCommandToQueue>
 236:	04 c0       	rjmp	.+8      	; 0x240 <parseLeft+0x38>
				 }else{
				 midiCommandToQueue(channel, _NOTEOFF, (count+offset));
 238:	4c 2f       	mov	r20, r28
 23a:	60 e8       	ldi	r22, 0x80	; 128
 23c:	8f 2d       	mov	r24, r15
 23e:	cb df       	rcall	.-106    	; 0x1d6 <midiCommandToQueue>
	 //return currentbits;
 }

 void parseLeft(char changedBits, char thePort, char offset, char channel){
	 unsigned char count = 0;
	 for (unsigned char mask = 0x01; mask; mask <<= 1) {
 240:	dd 0f       	add	r29, r29
 242:	cf 5f       	subi	r28, 0xFF	; 255
 244:	c1 13       	cpse	r28, r17
 246:	ed cf       	rjmp	.-38     	; 0x222 <parseLeft+0x1a>
				 midiCommandToQueue(channel, _NOTEOFF, (count+offset));
			 }
		 }
		 count++;
	 }
 }
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	ff 90       	pop	r15
 252:	ef 90       	pop	r14
 254:	08 95       	ret

00000256 <parseRight>:
	 enqueue(&serialOutQueue, _DEFAULTVELOCITY);
	 TX0_INTERRUPT_ON;
 }


 void parseRight(unsigned char changedBits, char thePort, char offset, char channel){
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	08 2f       	mov	r16, r24
 264:	e6 2e       	mov	r14, r22
 266:	f2 2e       	mov	r15, r18
 268:	18 e0       	ldi	r17, 0x08	; 8
 26a:	14 0f       	add	r17, r20
 26c:	c4 2f       	mov	r28, r20
	 unsigned char count = 0;
	 for (unsigned char mask = 0x80; mask; mask >>= 1) {
 26e:	d0 e8       	ldi	r29, 0x80	; 128
		 if(mask&changedBits?'1':'0' == 1){ //key is depressed, so do somEthing
 270:	9d 2f       	mov	r25, r29
 272:	90 23       	and	r25, r16
 274:	61 f0       	breq	.+24     	; 0x28e <parseRight+0x38>
			 //figure out what state to send out the MIDI port
			 if(thePort&mask?'1':'0' == 1){ //if depressed
 276:	9d 2f       	mov	r25, r29
 278:	9e 21       	and	r25, r14
 27a:	29 f0       	breq	.+10     	; 0x286 <parseRight+0x30>
				 midiCommandToQueue(channel, _NOTEON, (count+offset));
 27c:	4c 2f       	mov	r20, r28
 27e:	60 e9       	ldi	r22, 0x90	; 144
 280:	8f 2d       	mov	r24, r15
 282:	a9 df       	rcall	.-174    	; 0x1d6 <midiCommandToQueue>
 284:	04 c0       	rjmp	.+8      	; 0x28e <parseRight+0x38>
				 }else{
				 midiCommandToQueue(channel, _NOTEOFF, (count+offset));
 286:	4c 2f       	mov	r20, r28
 288:	60 e8       	ldi	r22, 0x80	; 128
 28a:	8f 2d       	mov	r24, r15
 28c:	a4 df       	rcall	.-184    	; 0x1d6 <midiCommandToQueue>
 }


 void parseRight(unsigned char changedBits, char thePort, char offset, char channel){
	 unsigned char count = 0;
	 for (unsigned char mask = 0x80; mask; mask >>= 1) {
 28e:	d6 95       	lsr	r29
 290:	cf 5f       	subi	r28, 0xFF	; 255
 292:	c1 13       	cpse	r28, r17
 294:	ed cf       	rjmp	.-38     	; 0x270 <parseRight+0x1a>
				 midiCommandToQueue(channel, _NOTEOFF, (count+offset));
			 }
		 }
		 count++;
	 }
 }
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	08 95       	ret

000002a4 <readManuals>:
 unsigned char ucDebouce2[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 unsigned char ucDebouce3[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 unsigned char ucDebouce4[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 unsigned char ucDebouce5[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

 void readManuals(){
 2a4:	8f 92       	push	r8
 2a6:	9f 92       	push	r9
 2a8:	af 92       	push	r10
 2aa:	bf 92       	push	r11
 2ac:	cf 92       	push	r12
 2ae:	df 92       	push	r13
 2b0:	ef 92       	push	r14
 2b2:	ff 92       	push	r15
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	0f 2e       	mov	r0, r31
 2be:	f4 e0       	ldi	r31, 0x04	; 4
 2c0:	cf 2e       	mov	r12, r31
 2c2:	f2 e0       	ldi	r31, 0x02	; 2
 2c4:	df 2e       	mov	r13, r31
 2c6:	f0 2d       	mov	r31, r0
 2c8:	c5 e0       	ldi	r28, 0x05	; 5
 2ca:	d2 e0       	ldi	r29, 0x02	; 2
 2cc:	0f 2e       	mov	r0, r31
 2ce:	fc e2       	ldi	r31, 0x2C	; 44
 2d0:	8f 2e       	mov	r8, r31
 2d2:	f0 2d       	mov	r31, r0
	 unsigned char ucSet = 0;
	 unsigned char ucKeyStateDiff = 0;
	 unsigned char ucDebouncedKeyState = 0;

	 for(unsigned char c=0x80; (unsigned) c>0x08; c >>=1){
 2d4:	68 94       	set
 2d6:	99 24       	eor	r9, r9
 2d8:	97 f8       	bld	r9, 7
 unsigned char ucDebouce3[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 unsigned char ucDebouce4[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 unsigned char ucDebouce5[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

 void readManuals(){
	 unsigned char ucSet = 0;
 2da:	10 e0       	ldi	r17, 0x00	; 0
	 unsigned char ucKeyStateDiff = 0;
	 unsigned char ucDebouncedKeyState = 0;

	 for(unsigned char c=0x80; (unsigned) c>0x08; c >>=1){
		 PORTK = c; //set the scanner pin
 2dc:	68 94       	set
 2de:	ee 24       	eor	r14, r14
 2e0:	e3 f8       	bld	r14, 3
 2e2:	ff 24       	eor	r15, r15
 2e4:	f3 94       	inc	r15
 2e6:	f7 01       	movw	r30, r14
 2e8:	90 82       	st	Z, r9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ea:	8f e9       	ldi	r24, 0x9F	; 159
 2ec:	9f e0       	ldi	r25, 0x0F	; 15
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <readManuals+0x4a>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <readManuals+0x50>
 2f4:	00 00       	nop
		 //delayMicroseconds(10);
		 _delay_ms(1);
		 //do pins 1-8
		 // binaryCharPrint(PINC);
		 //ucDebouncedKeyState = debounce(PINC, ucSet);
		 ucDebouncedKeyState= PINC;
 2f6:	06 b1       	in	r16, 0x06	; 6
 2f8:	56 01       	movw	r10, r12
		 //binaryCharPrint(ucDebouncedKeyState);
		 ucKeyStateDiff = ucDebouncedKeyState^ucPreviousKeyState[ucSet*2];
 2fa:	f6 01       	movw	r30, r12
 2fc:	80 81       	ld	r24, Z
 2fe:	80 27       	eor	r24, r16

		 if(ucKeyStateDiff!=0x00){ //if there is a change in key state
 300:	29 f0       	breq	.+10     	; 0x30c <readManuals+0x68>
			 parseLeft(ucKeyStateDiff, ucDebouncedKeyState, (36+(16*ucSet)), 12);
 302:	2c e0       	ldi	r18, 0x0C	; 12
 304:	48 ef       	ldi	r20, 0xF8	; 248
 306:	48 0d       	add	r20, r8
 308:	60 2f       	mov	r22, r16
 30a:	7e df       	rcall	.-260    	; 0x208 <parseLeft>
		 }
		 ucPreviousKeyState[ucSet*2] = ucDebouncedKeyState;
 30c:	f5 01       	movw	r30, r10
 30e:	00 83       	st	Z, r16
		 

		 //do pins 9-16
		 // ucDebouncedKeyState = debounce(PINA, ucSet+1);
		 ucDebouncedKeyState=PINA;
 310:	00 b1       	in	r16, 0x00	; 0
 312:	5e 01       	movw	r10, r28
		 
		 ucKeyStateDiff = ucDebouncedKeyState^ucPreviousKeyState[(ucSet*2)+1];
 314:	88 81       	ld	r24, Y
 316:	80 27       	eor	r24, r16
		 
		 if(ucKeyStateDiff!=0x00){ //if there is a change in key state
 318:	21 f0       	breq	.+8      	; 0x322 <readManuals+0x7e>
			 parseRight(ucKeyStateDiff, ucDebouncedKeyState, (36+(16*ucSet+8)), 12);
 31a:	2c e0       	ldi	r18, 0x0C	; 12
 31c:	48 2d       	mov	r20, r8
 31e:	60 2f       	mov	r22, r16
 320:	9a df       	rcall	.-204    	; 0x256 <parseRight>
		 }
		 ucPreviousKeyState[ucSet*2+1] = ucDebouncedKeyState;
 322:	f5 01       	movw	r30, r10
 324:	00 83       	st	Z, r16
		 
		 ucSet++;
 326:	1f 5f       	subi	r17, 0xFF	; 255
 void readManuals(){
	 unsigned char ucSet = 0;
	 unsigned char ucKeyStateDiff = 0;
	 unsigned char ucDebouncedKeyState = 0;

	 for(unsigned char c=0x80; (unsigned) c>0x08; c >>=1){
 328:	96 94       	lsr	r9
 32a:	f2 e0       	ldi	r31, 0x02	; 2
 32c:	cf 0e       	add	r12, r31
 32e:	d1 1c       	adc	r13, r1
 330:	22 96       	adiw	r28, 0x02	; 2
 332:	80 e1       	ldi	r24, 0x10	; 16
 334:	88 0e       	add	r8, r24
 336:	14 30       	cpi	r17, 0x04	; 4
 338:	b1 f6       	brne	.-84     	; 0x2e6 <readManuals+0x42>
 33a:	68 94       	set
 33c:	dd 24       	eor	r13, r13
 33e:	d3 f8       	bld	r13, 3
		 ucSet++;
		 
	 }

	 for(unsigned char c=0x08; c; c >>=1){
		 PORTK = c; //set the scanner pin
 340:	68 94       	set
 342:	ee 24       	eor	r14, r14
 344:	e3 f8       	bld	r14, 3
 346:	ff 24       	eor	r15, r15
 348:	f3 94       	inc	r15
 34a:	f7 01       	movw	r30, r14
 34c:	d0 82       	st	Z, r13
 34e:	8f e9       	ldi	r24, 0x9F	; 159
 350:	9f e0       	ldi	r25, 0x0F	; 15
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <readManuals+0xae>
 356:	00 c0       	rjmp	.+0      	; 0x358 <readManuals+0xb4>
 358:	00 00       	nop
		 //    Serial.print("|");
		 //    Serial.print(ucSet);
		 //    Serial.print("|");
		 //    ucDebouncedKeyState = debounce(PINC, ucSet);
		 //    Serial.print(ucDebouncedKeyState);
		 ucDebouncedKeyState = PINC;
 35a:	06 b1       	in	r16, 0x06	; 6
		 ucKeyStateDiff = ucDebouncedKeyState^ucPreviousKeyState[ucSet*2];
 35c:	c1 2f       	mov	r28, r17
 35e:	d0 e0       	ldi	r29, 0x00	; 0
 360:	cc 0f       	add	r28, r28
 362:	dd 1f       	adc	r29, r29
 364:	fe 01       	movw	r30, r28
 366:	ec 5f       	subi	r30, 0xFC	; 252
 368:	fd 4f       	sbci	r31, 0xFD	; 253
 36a:	80 81       	ld	r24, Z
 36c:	80 27       	eor	r24, r16
		 //Serial.print("|");
		 //binaryCharPrint(ucKeyStateDiff);
		 //Serial.println("");
		 if(ucKeyStateDiff!=0x00){ //if there is a change in key state
 36e:	41 f0       	breq	.+16     	; 0x380 <readManuals+0xdc>
			 parseLeft(ucKeyStateDiff, ucDebouncedKeyState, (36+(16*(ucSet%4))), 11);
 370:	41 2f       	mov	r20, r17
 372:	43 70       	andi	r20, 0x03	; 3
 374:	42 95       	swap	r20
 376:	40 7f       	andi	r20, 0xF0	; 240
 378:	4c 5d       	subi	r20, 0xDC	; 220
 37a:	2b e0       	ldi	r18, 0x0B	; 11
 37c:	60 2f       	mov	r22, r16
 37e:	44 df       	rcall	.-376    	; 0x208 <parseLeft>
		 }
		 ucPreviousKeyState[ucSet*2] = ucDebouncedKeyState;
 380:	fe 01       	movw	r30, r28
 382:	ec 5f       	subi	r30, 0xFC	; 252
 384:	fd 4f       	sbci	r31, 0xFD	; 253
 386:	00 83       	st	Z, r16
		 
		 //do pins 9-16
		 //ucDebouncedKeyState = debounce(PINA, ucSet+1);
		 ucDebouncedKeyState = PINA;
 388:	00 b1       	in	r16, 0x00	; 0
		 //binaryCharPrint(PINA);
		 // Serial.println("");
		 ucKeyStateDiff = ucDebouncedKeyState^ucPreviousKeyState[ucSet*2+1];
 38a:	21 96       	adiw	r28, 0x01	; 1
 38c:	fe 01       	movw	r30, r28
 38e:	ec 5f       	subi	r30, 0xFC	; 252
 390:	fd 4f       	sbci	r31, 0xFD	; 253
 392:	80 81       	ld	r24, Z
 394:	80 27       	eor	r24, r16
		 if(ucKeyStateDiff!=0x00){ //if there is a change in key state
 396:	41 f0       	breq	.+16     	; 0x3a8 <readManuals+0x104>
			 parseRight(ucKeyStateDiff, ucDebouncedKeyState, (36+(16*(ucSet%4)+8)), 11);
 398:	41 2f       	mov	r20, r17
 39a:	43 70       	andi	r20, 0x03	; 3
 39c:	42 95       	swap	r20
 39e:	40 7f       	andi	r20, 0xF0	; 240
 3a0:	44 5d       	subi	r20, 0xD4	; 212
 3a2:	2b e0       	ldi	r18, 0x0B	; 11
 3a4:	60 2f       	mov	r22, r16
 3a6:	57 df       	rcall	.-338    	; 0x256 <parseRight>
		 }
		 ucPreviousKeyState[ucSet*2+1] = ucDebouncedKeyState;
 3a8:	cc 5f       	subi	r28, 0xFC	; 252
 3aa:	dd 4f       	sbci	r29, 0xFD	; 253
 3ac:	08 83       	st	Y, r16
		 ucSet++;
 3ae:	1f 5f       	subi	r17, 0xFF	; 255
		 
		 ucSet++;
		 
	 }

	 for(unsigned char c=0x08; c; c >>=1){
 3b0:	d6 94       	lsr	r13
 3b2:	18 30       	cpi	r17, 0x08	; 8
 3b4:	51 f6       	brne	.-108    	; 0x34a <readManuals+0xa6>
		 }
		 ucPreviousKeyState[ucSet*2+1] = ucDebouncedKeyState;
		 ucSet++;
	 }
	 // Serial.println("");
 }
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	ff 90       	pop	r15
 3c0:	ef 90       	pop	r14
 3c2:	df 90       	pop	r13
 3c4:	cf 90       	pop	r12
 3c6:	bf 90       	pop	r11
 3c8:	af 90       	pop	r10
 3ca:	9f 90       	pop	r9
 3cc:	8f 90       	pop	r8
 3ce:	08 95       	ret

000003d0 <readPedals>:


 void readPedals(void)
 {
 3d0:	cf 93       	push	r28
	 unsigned char ucDebouncedKeyState, ucKeyStateDiff, ucSet = 0;
	 
	 for(unsigned char c=0x02; c; c >>=1)
	 {
		 PORTG = c;
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	84 bb       	out	0x14, r24	; 20
 3d6:	8f e9       	ldi	r24, 0x9F	; 159
 3d8:	9f e0       	ldi	r25, 0x0F	; 15
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <readPedals+0xa>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <readPedals+0x10>
 3e0:	00 00       	nop
		 _delay_ms(1);
		 ucDebouncedKeyState = PINL;
 3e2:	c0 91 09 01 	lds	r28, 0x0109
		 ucKeyStateDiff = ucDebouncedKeyState^ucPreviousPedalState[ucSet*2];
 3e6:	80 91 00 02 	lds	r24, 0x0200
 3ea:	8c 27       	eor	r24, r28

		 if(ucKeyStateDiff!=0x00){ //if there is a change in key state
 3ec:	21 f0       	breq	.+8      	; 0x3f6 <readPedals+0x26>
			 parseRight(ucKeyStateDiff, ucDebouncedKeyState, (36+(16*ucSet)), 13);
 3ee:	2d e0       	ldi	r18, 0x0D	; 13
 3f0:	44 e2       	ldi	r20, 0x24	; 36
 3f2:	6c 2f       	mov	r22, r28
 3f4:	30 df       	rcall	.-416    	; 0x256 <parseRight>
		 }
		 ucPreviousPedalState[ucSet*2] = ucDebouncedKeyState;
 3f6:	e0 e0       	ldi	r30, 0x00	; 0
 3f8:	f2 e0       	ldi	r31, 0x02	; 2
 3fa:	c0 83       	st	Z, r28

		 
		 ucDebouncedKeyState = PINB;
 3fc:	c3 b1       	in	r28, 0x03	; 3
		 ucKeyStateDiff = ucDebouncedKeyState^ucPreviousPedalState[ucSet*2+1];
 3fe:	81 81       	ldd	r24, Z+1	; 0x01
 400:	8c 27       	eor	r24, r28

		 if(ucKeyStateDiff!=0x00){ //if there is a change in key state
 402:	21 f0       	breq	.+8      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
			 parseRight(ucKeyStateDiff, ucDebouncedKeyState, (36+(16*ucSet)+8), 13);
 404:	2d e0       	ldi	r18, 0x0D	; 13
 406:	4c e2       	ldi	r20, 0x2C	; 44
 408:	6c 2f       	mov	r22, r28
 40a:	25 df       	rcall	.-438    	; 0x256 <parseRight>
		 }
		 ucPreviousPedalState[ucSet*2+1] = ucDebouncedKeyState;
 40c:	e0 e0       	ldi	r30, 0x00	; 0
 40e:	f2 e0       	ldi	r31, 0x02	; 2
 410:	c1 83       	std	Z+1, r28	; 0x01
 {
	 unsigned char ucDebouncedKeyState, ucKeyStateDiff, ucSet = 0;
	 
	 for(unsigned char c=0x02; c; c >>=1)
	 {
		 PORTG = c;
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	84 bb       	out	0x14, r24	; 20
 416:	8f e9       	ldi	r24, 0x9F	; 159
 418:	9f e0       	ldi	r25, 0x0F	; 15
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
 420:	00 00       	nop
		 _delay_ms(1);
		 ucDebouncedKeyState = PINL;
 422:	c0 91 09 01 	lds	r28, 0x0109
		 ucKeyStateDiff = ucDebouncedKeyState^ucPreviousPedalState[ucSet*2];
 426:	82 81       	ldd	r24, Z+2	; 0x02
 428:	8c 27       	eor	r24, r28

		 if(ucKeyStateDiff!=0x00){ //if there is a change in key state
 42a:	21 f0       	breq	.+8      	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
			 parseRight(ucKeyStateDiff, ucDebouncedKeyState, (36+(16*ucSet)), 13);
 42c:	2d e0       	ldi	r18, 0x0D	; 13
 42e:	44 e3       	ldi	r20, 0x34	; 52
 430:	6c 2f       	mov	r22, r28
 432:	11 df       	rcall	.-478    	; 0x256 <parseRight>
		 }
		 ucPreviousPedalState[ucSet*2] = ucDebouncedKeyState;
 434:	e0 e0       	ldi	r30, 0x00	; 0
 436:	f2 e0       	ldi	r31, 0x02	; 2
 438:	c2 83       	std	Z+2, r28	; 0x02

		 
		 ucDebouncedKeyState = PINB;
 43a:	c3 b1       	in	r28, 0x03	; 3
		 ucKeyStateDiff = ucDebouncedKeyState^ucPreviousPedalState[ucSet*2+1];
 43c:	83 81       	ldd	r24, Z+3	; 0x03
 43e:	8c 27       	eor	r24, r28

		 if(ucKeyStateDiff!=0x00){ //if there is a change in key state
 440:	21 f0       	breq	.+8      	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
			 parseRight(ucKeyStateDiff, ucDebouncedKeyState, (36+(16*ucSet)+8), 13);
 442:	2d e0       	ldi	r18, 0x0D	; 13
 444:	4c e3       	ldi	r20, 0x3C	; 60
 446:	6c 2f       	mov	r22, r28
 448:	06 df       	rcall	.-500    	; 0x256 <parseRight>
		 }
		 ucPreviousPedalState[ucSet*2+1] = ucDebouncedKeyState;
 44a:	c0 93 03 02 	sts	0x0203, r28
		 ucSet++;
	 }
 }
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <__vector_26>:



 //This is the transmitter ISR
  ISR(USART0_UDRE_vect)
  {
 452:	1f 92       	push	r1
 454:	0f 92       	push	r0
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	0f 92       	push	r0
 45a:	11 24       	eor	r1, r1
 45c:	0b b6       	in	r0, 0x3b	; 59
 45e:	0f 92       	push	r0
 460:	2f 93       	push	r18
 462:	3f 93       	push	r19
 464:	4f 93       	push	r20
 466:	5f 93       	push	r21
 468:	6f 93       	push	r22
 46a:	7f 93       	push	r23
 46c:	8f 93       	push	r24
 46e:	9f 93       	push	r25
 470:	af 93       	push	r26
 472:	bf 93       	push	r27
 474:	ef 93       	push	r30
 476:	ff 93       	push	r31
	  //do something here

	  if(isEmpty(&serialOutQueue)==0){
 478:	84 e1       	ldi	r24, 0x14	; 20
 47a:	92 e0       	ldi	r25, 0x02	; 2
 47c:	9c de       	rcall	.-712    	; 0x1b6 <isEmpty>
 47e:	81 11       	cpse	r24, r1
 480:	06 c0       	rjmp	.+12     	; 0x48e <__vector_26+0x3c>
		  //data is empty, so stop the interrupt
		  TX0_INTERRUPT_OFF; //will this work?
 482:	e1 ec       	ldi	r30, 0xC1	; 193
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	8f 7d       	andi	r24, 0xDF	; 223
 48a:	80 83       	st	Z, r24
 48c:	05 c0       	rjmp	.+10     	; 0x498 <__vector_26+0x46>
		  
	  }else
	  UDR0 = dequeue(&serialOutQueue);
 48e:	84 e1       	ldi	r24, 0x14	; 20
 490:	92 e0       	ldi	r25, 0x02	; 2
 492:	5a de       	rcall	.-844    	; 0x148 <dequeue>
 494:	80 93 c6 00 	sts	0x00C6, r24
  }
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	bf 91       	pop	r27
 49e:	af 91       	pop	r26
 4a0:	9f 91       	pop	r25
 4a2:	8f 91       	pop	r24
 4a4:	7f 91       	pop	r23
 4a6:	6f 91       	pop	r22
 4a8:	5f 91       	pop	r21
 4aa:	4f 91       	pop	r20
 4ac:	3f 91       	pop	r19
 4ae:	2f 91       	pop	r18
 4b0:	0f 90       	pop	r0
 4b2:	0b be       	out	0x3b, r0	; 59
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <__vector_52>:


 ISR(USART2_UDRE_vect)
 {
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	0b b6       	in	r0, 0x3b	; 59
 4ca:	0f 92       	push	r0
 4cc:	2f 93       	push	r18
 4ce:	3f 93       	push	r19
 4d0:	4f 93       	push	r20
 4d2:	5f 93       	push	r21
 4d4:	6f 93       	push	r22
 4d6:	7f 93       	push	r23
 4d8:	8f 93       	push	r24
 4da:	9f 93       	push	r25
 4dc:	af 93       	push	r26
 4de:	bf 93       	push	r27
 4e0:	ef 93       	push	r30
 4e2:	ff 93       	push	r31
	 //do something here

	 if(isEmpty(&midiOutQueue)==0){
 4e4:	8c e7       	ldi	r24, 0x7C	; 124
 4e6:	92 e0       	ldi	r25, 0x02	; 2
 4e8:	66 de       	rcall	.-820    	; 0x1b6 <isEmpty>
 4ea:	81 11       	cpse	r24, r1
 4ec:	06 c0       	rjmp	.+12     	; 0x4fa <__vector_52+0x3c>
		 //data is empty, so stop the interrupt
		 TX2_INTERRUPT_OFF; //will this work?
 4ee:	e1 ed       	ldi	r30, 0xD1	; 209
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	80 81       	ld	r24, Z
 4f4:	8f 7d       	andi	r24, 0xDF	; 223
 4f6:	80 83       	st	Z, r24
 4f8:	05 c0       	rjmp	.+10     	; 0x504 <__vector_52+0x46>
		 
	 }else
	 UDR2 = dequeue(&midiOutQueue);
 4fa:	8c e7       	ldi	r24, 0x7C	; 124
 4fc:	92 e0       	ldi	r25, 0x02	; 2
 4fe:	24 de       	rcall	.-952    	; 0x148 <dequeue>
 500:	80 93 d6 00 	sts	0x00D6, r24
 }
 504:	ff 91       	pop	r31
 506:	ef 91       	pop	r30
 508:	bf 91       	pop	r27
 50a:	af 91       	pop	r26
 50c:	9f 91       	pop	r25
 50e:	8f 91       	pop	r24
 510:	7f 91       	pop	r23
 512:	6f 91       	pop	r22
 514:	5f 91       	pop	r21
 516:	4f 91       	pop	r20
 518:	3f 91       	pop	r19
 51a:	2f 91       	pop	r18
 51c:	0f 90       	pop	r0
 51e:	0b be       	out	0x3b, r0	; 59
 520:	0f 90       	pop	r0
 522:	0f be       	out	0x3f, r0	; 63
 524:	0f 90       	pop	r0
 526:	1f 90       	pop	r1
 528:	18 95       	reti

0000052a <main>:
 * PORT L, B and some pins from G are used for the pedals
 */
 
 //----------Keys---------
  //PA7 = 29-> PA0 = 22
  DDRA = 0b00000000;//set as inputs
 52a:	11 b8       	out	0x01, r1	; 1
  //PC = 37 -> PC0 = 30
  DDRC = 0b00000000; //set as inputs
 52c:	17 b8       	out	0x07, r1	; 7
  DDRK = 0b11111111; //set as outputs
 52e:	8f ef       	ldi	r24, 0xFF	; 255
 530:	80 93 07 01 	sts	0x0107, r24
  //----------Pedals-----------
  DDRL = 0x00; 
 534:	10 92 0a 01 	sts	0x010A, r1
  DDRB = 0x00;
 538:	14 b8       	out	0x04, r1	; 4
  DDRG = 0x03;
 53a:	83 e0       	ldi	r24, 0x03	; 3
 53c:	83 bb       	out	0x13, r24	; 19
  
  /* Initiate MIDI */
  //midi is 31250
  //Serial.begin(115200);
  //Serial.begin(31250);
  USART0_Init(MIDI_BAUD_PRESCALE);
 53e:	8f e1       	ldi	r24, 0x1F	; 31
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	13 d0       	rcall	.+38     	; 0x56a <USART0_Init>
  USART2_Init(MIDI_BAUD_PRESCALE);
 544:	8f e1       	ldi	r24, 0x1F	; 31
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	1b d0       	rcall	.+54     	; 0x580 <USART2_Init>
 


  /* Initiate Message Buffer */
  //midiMessageBuffer.init(100);
  setupQueue(&serialOutQueue);
 54a:	84 e1       	ldi	r24, 0x14	; 20
 54c:	92 e0       	ldi	r25, 0x02	; 2
 54e:	dd dd       	rcall	.-1094   	; 0x10a <setupQueue>
  setupQueue(&midiOutQueue);
 550:	8c e7       	ldi	r24, 0x7C	; 124
 552:	92 e0       	ldi	r25, 0x02	; 2
 554:	da dd       	rcall	.-1100   	; 0x10a <setupQueue>
  sei();
 556:	78 94       	sei
  //enqueue(&serialOutQueue, 'h');
  //TX0_INTERRUPT_ON;


  // put your main code here, to run repeatedly:
  readManuals();
 558:	a5 de       	rcall	.-694    	; 0x2a4 <readManuals>
  //testPedals();
  readPedals();
 55a:	3a df       	rcall	.-396    	; 0x3d0 <readPedals>
 55c:	8f e1       	ldi	r24, 0x1F	; 31
 55e:	9e e4       	ldi	r25, 0x4E	; 78
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <main+0x36>
 564:	00 c0       	rjmp	.+0      	; 0x566 <main+0x3c>
 566:	00 00       	nop
 568:	f7 cf       	rjmp	.-18     	; 0x558 <main+0x2e>

0000056a <USART0_Init>:
 {

	 while(!(UCSR1A & (1<<RXC1)));
	 
	 return UDR1;
 }
 56a:	90 93 c5 00 	sts	0x00C5, r25
 56e:	80 93 c4 00 	sts	0x00C4, r24
 572:	88 eb       	ldi	r24, 0xB8	; 184
 574:	80 93 c1 00 	sts	0x00C1, r24
 578:	86 e0       	ldi	r24, 0x06	; 6
 57a:	80 93 c2 00 	sts	0x00C2, r24
 57e:	08 95       	ret

00000580 <USART2_Init>:

  void USART2_Init(unsigned int baud)
  {
	  //baud rate
	  UBRR2H = (unsigned char)(baud>>8);
 580:	90 93 d5 00 	sts	0x00D5, r25
	  UBRR2L = (unsigned char)baud;
 584:	80 93 d4 00 	sts	0x00D4, r24
	  //enable receiver and tx, emable rx interrupt and Data Register Empty interrupt
	  UCSR2B = (1 <<RXEN2)|(1<<TXEN2)|(1<<RXCIE2)|(1<<UDRIE2);
 588:	88 eb       	ldi	r24, 0xB8	; 184
 58a:	80 93 d1 00 	sts	0x00D1, r24
	  //set frame format: 8data, 2stop bit
	  //UCSR0C = (1 << USBS0)|(3<<UCSZ00);
	  UCSR2C = (3<<UCSZ20); //one stop bit
 58e:	86 e0       	ldi	r24, 0x06	; 6
 590:	80 93 d2 00 	sts	0x00D2, r24
 594:	08 95       	ret

00000596 <_exit>:
 596:	f8 94       	cli

00000598 <__stop_program>:
 598:	ff cf       	rjmp	.-2      	; 0x598 <__stop_program>
